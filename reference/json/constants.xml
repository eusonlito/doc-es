<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ --> 
<!-- EN-Revision: 02b1d42099b98f45609d49fde36d10893ad0a314 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<appendix xml:id="json.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  Las siguientes constantes indican el tipo de error retornado por
  <function>json_last_error</function>.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-error-none">
   <term>
    <constant>JSON_ERROR_NONE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     No ha ocurrido ningún error.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-depth">
   <term>
    <constant>JSON_ERROR_DEPTH</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Se ha excedido la profundidad máxima de la pila.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-state-mismatch">
   <term>
    <constant>JSON_ERROR_STATE_MISMATCH</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Por desbordamiento de buffer o cuando los modos no coinciden.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-ctrl-char">
   <term>
    <constant>JSON_ERROR_CTRL_CHAR</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Error del carácter de control, posiblemente se ha codificado de forma incorrecta.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-syntax">
   <term>
    <constant>JSON_ERROR_SYNTAX</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Error de sintaxis.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-utf8">
   <term>
    <constant>JSON_ERROR_UTF8</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Caracteres UTF-8 mal formados, posiblemente codificados incorrectamente.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-recursion">
   <term>
    <constant>JSON_ERROR_RECURSION</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <para>
     El objeto o array pasado a <function>json_encode</function> incluye
     referencias recursivas y no se puede codificar.
     Si se proporcionó la opción <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant>,
     se codificará &null; en el lugar de la referencia recursiva.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-inf-or-nan">
   <term>
    <constant>JSON_ERROR_INF_OR_NAN</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <para>
     El valor pasado a <function>json_encode</function> incluye
     <link linkend="language.types.float.nan"><constant>NAN</constant></link>
     o <link linkend="function.is-infinite"><constant>INF</constant></link>.
     Si se proporcionó la opción <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant>,
     se codificará <literal>0</literal> en el lugar de estos números
     especiales.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-unsupported-type">
   <term>
    <constant>JSON_ERROR_UNSUPPORTED_TYPE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <para>
     Se proporcionó un valor de un tipo no admitido para
     <function>json_encode</function>, tal como un <type>resource</type>.
     Si se proporcionó la opción <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant>,
     se codificará &null; en el lugar del valor no admitido.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-invalid-property-name">
   <term>
    <constant>JSON_ERROR_INVALID_PROPERTY_NAME</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <para>
     Se ha usado una clave que empieza con el caracter \u0000 en la cadena
     de texto pasada a <function>json_encode</function> al decodificar
     un objeto JSON en un objeto PHP.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-utf16">
   <term>
    <constant>JSON_ERROR_UTF16</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <para>
     Un único sustituto UTF-16 no emparejado en una secuencia de escape
     unicode contenida en la cadena JSON pasada a
     <function>json_encode</function>.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 
 <para>
  Las siguientes constantes se pueden combinar para obtener opciones para
  <function>json_encode</function>.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-hex-tag">
   <term>
    <constant>JSON_HEX_TAG</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todos los &lt; y &gt; se convierten a \u003C y \u003E.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-amp">
   <term>
    <constant>JSON_HEX_AMP</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todos los &amp; se convierten a \u0026.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-apos">
   <term>
    <constant>JSON_HEX_APOS</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todas las ' se convierten a \u0027.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-quot">
   <term>
    <constant>JSON_HEX_QUOT</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todas las " se convierten a \u0022.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-force-object">
   <term>
    <constant>JSON_FORCE_OBJECT</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Devuelve un objeto en vez de un array cuando se usa un array no
     asociativo. Especialmente útil cuando el destinatario del resultado espera
     un objeto y el array está vacío.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-numeric-check">
   <term>
    <constant>JSON_NUMERIC_CHECK</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Codifica textos numéricos como números.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-bigint-as-string">
   <term>
    <constant>JSON_BIGINT_AS_STRING</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Codifica integer grandes como su valor del string original.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-object-as-array">
   <term>
    <constant>JSON_OBJECT_AS_ARRAY</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Decodifica objetos JSON como arrays de PHP. Esta opción se puede
     añadir automáticamente llamando a <function>json_decode</function> con el segundo
     parámetro igual a &true;
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-pretty-print">
   <term>
    <constant>JSON_PRETTY_PRINT</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Utiliza espacios en blanco para formatear los datos devueltos.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-slashes">
   <term>
    <constant>JSON_UNESCAPED_SLASHES</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     No escapar <literal>/</literal>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-unicode">
   <term>
    <constant>JSON_UNESCAPED_UNICODE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Codificar caracteres Unicode multibyte literalmente (por defecto es escapado como \uXXXX).
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-partial-output-on-error">
   <term>
    <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Sustituir algunos valores no codificables en lugar de fallar.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-preserve-zero-fraction">
   <term>
    <constant>JSON_PRESERVE_ZERO_FRACTION</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Se asegura de que los valores <type>float</type> son siempre codificados como valores de punto flotante.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-line-terminators">
   <term>
    <constant>JSON_UNESCAPED_LINE_TERMINATORS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     La finalización de línea se mantienen sin escapar
     cuando se indica <constant>JSON_UNESCAPED_UNICODE</constant>.
     Utiliza el mismo comportamiento que tenía antes de PHP 7.1 sin
     esta constante. Disponible desde PHP 7.1.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  Las siguientes constantes pueden combinarse para formar opciones para
  <function>json_decode</function> y <function>json_encode</function>.
 </para>

 <variablelist>
  <varlistentry xml:id="constant.json-invalid-utf8-ignore">
   <term>
    <constant>JSON_INVALID_UTF8_IGNORE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Ignorar caracteres UTF-8 inválidos.
     Disponible desde PHP 7.2.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-invalid-utf8-substitute">
   <term>
    <constant>JSON_INVALID_UTF8_SUBSTITUTE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Convertir caracteres UTF-8 inválidos a \0xfffd
     (Carácter Unicode 'CARÁCTER DE SUSTITUCIÓN')
     Disponible desde PHP 7.2.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-throw-on-error">
   <term>
    <constant>JSON_THROW_ON_ERROR</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Lanza <classname>JsonException</classname> si ocurre un error en lugar de
     establecer el estado global de error que se recupera con
     <function>json_last_error</function> y <function>json_last_error_msg</function>.
     <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> tiene prioridad sobre
     <constant>JSON_THROW_ON_ERROR</constant>.
     Disponible desde PHP 7.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-non-backed-enum">
   <term>
    <constant>JSON_ERROR_NON_BACKED_ENUM</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     El valor pasado a <function>json_encode</function> incluye un enum
     no respaldado que no se puede serializar. Disponible desde PHP 8.1.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
